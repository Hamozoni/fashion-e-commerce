generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model product {
  id               String   @id @default(uuid())
  name             String
  createdAt        DateTime @default(now())
  updateddAt       DateTime  @updatedAt
  priceInCent      Int
  totalPriceInCent Int?
  offerPriceInCent Int?     @default(0)
  isOffer          Boolean?  @default(false)
  isAvailable      Boolean  @default(true)
  description      String   @db.Text
  quantity         Int      @default(1)
  category         String
  subCategory      String
  serialNumber     String   @unique
  selectedSize     String?
  selectedColor    String?
  brand    String?
  image String?
  sizes productsizes[]
  images productimages[]
  specifications specifications[]
  reviews reviews[]
  orders order[]
}

model productimages {
  id        String   @id @default(uuid())
  color     String
  productId String
  product product @relation(fields: [productId],references: [id],onDelete: Cascade)
  imagePath       String
}

model specifications {
  id        String   @id @default(uuid())
  key       String
  value     String
  productId String
  product    product @relation(fields: [productId],references: [id],onDelete: Cascade) 
}

model productsizes {
  id          String   @id @default(uuid())
  name        String
  description String?
  productId   String
  product product @relation(fields: [productId],references: [id],onDelete: Cascade)

}
model order {
  id               String   @id @default(uuid())
  status          order_status @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  auther user @relation(fields: [userId],references: [id],onDelete: Cascade)
  products product[]
  totalProductsQuantity Int
  deliveryFree Int
  totalPaidInCent Int
  paymentId String
  payment payment @relation(fields:[paymentId],references: [id])
}

model payment {
  id String @id @default(uuid())
  amountInCent Int
  currency currency @default(SAR)
  status payment_status @default(PENDING)
  method payment_mothed @default(DEBIT_CARD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user user @relation(fields: [userId], references: [id],onDelete: Cascade)
  order order[]
}

model reviews {
  id        String   @id @default(uuid())
  rateText  String @db.Text
  productId String
  autherId  String
  rating    Int    @default(3) 
  rateTitle String @db.Text
  images reviewsImages[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product product @relation(fields: [productId],references: [id],onDelete: Cascade)
  auther  user @relation(fields: [autherId],references: [id],onDelete: Cascade)
}

model reviewsImages {
  id String @id @default(uuid())
  imagePath String
  reviewId String
  reviews reviews @relation(fields: [reviewId],references:[id],onDelete: Cascade)
}


model user {
  id            String          @id @default(uuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  role  user_role @default(USER)
  password String?
  image         String?
  account       account?
  reviews   reviews[]
  orders   order[]
  payment  payment[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model account {
  id                       String  @id @default(uuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     user?   @relation(fields: [userId], references: [id],onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
}

model userAddress {
  id String @id @default(uuid())
  email String @unique
  lat Float
  lng Float
  route String
  neighborhood String
  city String
  country String
  formatedAddress  String   @db.Text
}
 
model verificationToken {
  id         String @id @default(uuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}

model resetPasswordToken {
  id         String @id @default(uuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
}
 

enum order_status {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
enum payment_status {
  PENDING
  COMPLETED
  FAILED
}

enum payment_mothed  {
  DEBIT_CARD
  CREDIT_CARD
  PAYPAL
  CASH
}
enum currency  {
  SAR
}

enum user_role {
  USER
  ADMIN
}


