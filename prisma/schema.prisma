generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id               String   @id @default(uuid())
  type             product_types  @default(FASHION)
  name             String
  createdAt        DateTime  @default(now())
  updateddAt       DateTime  @updatedAt
  describtion      String    @db.Text
  orderedQuantity         Int?      @default(0)
  category         String
  subcategory      String
  serialNumber     String   @unique
  brand    String?
  image String?
  informations ProductInformation[]
  specifications Specification[]
  reviews Review[]
  orders Order[]
	@@map("products")
}

model ProductInformation {
  id String @id @default(uuid())
  colorName String
  color String
  princeInHalala Int
  offerPriceInHalala Int?
  offerFinishAt DateTime?
  images ProductImage[]
  sizes ProductSize[]
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
}

model ProductImage {
  id String @id @default(uuid())
  imagePath String
  infoId String
  info ProductInformation @relation(fields: [infoId],references: [id],onDelete: Cascade)
}

model ProductSize {
  id String @id @default(uuid())
  name String
  shortName String
  stackQuantity Int
  infoId String
  info ProductInformation @relation(fields: [infoId],references: [id],onDelete: Cascade)
  @@map("productSizes")
}

model Specification {
  id        String   @id @default(uuid())
  name       String
  value     String
  productId String
  product    Product @relation(fields: [productId],references: [id],onDelete: Cascade) 
	@@map("specifications")
}
model Order {
  id               String   @id @default(uuid())
  status          order_status @default(PENDING)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime    @updatedAt
  userId          String
  auther User @relation(fields: [userId],references: [id],onDelete: Cascade)
  products Product[]
  totalProductsQuantity Int
  deliveryFree Int
  totalPaidInCent Int
  paymentId String
  payment Payment @relation(fields:[paymentId],references: [id])
	@@map("orders")
}

model Payment {
  id String @id @default(uuid())
  amountInCent Int
  currency currency @default(SAR)
  status payment_status @default(PENDING)
  method payment_mothed @default(DEBIT_CARD)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId String
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)
  order Order[]
	@@map("payments")
}

model Review {
  id        String   @id @default(uuid())
  rateText  String @db.Text
  productId String
  autherId  String
  rating    Int    @default(3) 
  rateTitle String @db.Text
  images ReviewImage[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  auther  User @relation(fields: [autherId],references: [id],onDelete: Cascade)
	@@map("reviews")
}

model ReviewImage {
  id String @id @default(uuid())
  imagePath String
  reviewId String
  reviews Review @relation(fields: [reviewId],references:[id],onDelete: Cascade)
	@@map("reviewsImages")
}


model User {
  id            String          @id @default(uuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  role  user_role @default(USER)
  password String?
  image         String?
  account       Account?
  reviews   Review[]
  orders   Order[]
  payment  Payment[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
	@@map("users")
}
 
model Account {
  id                       String  @id @default(uuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id],onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  @@unique([provider, providerAccountId])
  @@index([userId])
	@@map("accounts")
}

model UserAddress {
  id String @id @default(uuid())
  email String @unique
  lat Float
  lng Float
  route String
  neighborhood String
  city String
  country String
  formatedAddress  String   @db.Text
	@@map("userAddress")
}
 
model VerificationToken {
  id         String @id @default(uuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
	@@map("verificationTokens")
}

model ResetPasswordToken {
  id         String @id @default(uuid())
  email      String
  token      String @unique
  expires    DateTime
 
  @@unique([email, token])
	@@map("resetPasswordTokens")
}
 

enum order_status {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
enum payment_status {
  PENDING
  COMPLETED
  FAILED
}

enum payment_mothed  {
  DEBIT_CARD
  CREDIT_CARD
  PAYPAL
  CASH
}
enum currency  {
  SAR
}

enum user_role {
  USER
  ADMIN
}

enum product_types {
  FASHION
}


